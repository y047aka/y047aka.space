{"is404":false,"staticData":{"markdown-blocks-content/posts/svg-with-elm.md":"[1,[[6,[[8,\"この記事では、\"]]],[2,[[0,[0],[[8,\"SVG の基本的な書き方\"]]],[0,[0],[[8,\"Elm での記述方法\"]]],[0,[0],[[8,\"利用できるパッケージ\"]]]]],[6,[[8,\"について見ていきます。\"]]],[5,[0],[[8,\"SVG ってなんだろう？\"]]],[6,[[8,\"Scalable Vector Graphics の頭文字をとって、SVG と呼ばれています。\\n解像度に制限されないベクター画像のための XML 文法として利用されています。\"]]],[5,[1],[[8,\"仕様について\"]]],[6,[[8,\"SVG の仕様は W3C によって開発・勧告されています。\\nドキュメントが充実しているので、積極的に活用しましょう。\"]]],[6,[[2,\"https://www.w3.org/TR/SVG11/\",[0],[[8,\"Scalable Vector Graphics (SVG) 1.1 (Second Edition) | www.w3.org\"]]]]],[6,[[8,\"triple_underscore さんによる日本語訳を参考にするのも良いと思います。\"]]],[6,[[2,\"https://triple-underscore.github.io/SVG11/\",[0],[[8,\"SVG 1.1 仕様 （第２版） 日本語訳 | triple-underscore.github.io\"]]]]],[5,[1],[[8,\"SVG で何ができるのか？\"]]],[6,[[8,\"画像の形式は .jpg, .png, .gif など数多くありますが、\"]]],[2,[[0,[0],[[8,\"解像度に制限されない\"]]],[0,[0],[[8,\"ベクターである\"]]],[0,[0],[[8,\"XML で記述できる\"]]]]],[6,[[8,\"といった他にはない特徴を持つことが、SVG の強みです。\\nHTML 同様のスタイル指定や、アニメーションができるのも魅力ですね。\"]]],[6,[[8,\"アイコンやロゴイメージへの活用はもちろん、インタラクティブなコンテンツの作成、データの可視化（ビジュアライゼーション）やジェネラティブ・アートなどがブラウザ上で簡単に実現できてしまいます。\"]]],[6,[[8,\"すでに必須技術の 1 つと化した SVG ですが、これからも新しい使い方が発見されることでしょう。\"]]],[5,[1],[[8,\"基本的な書き方\"]]],[6,[[8,\"SVG を構成しているのは要素と属性です。\\nそのため、HTML と同じ感覚で記述することができます。\"]]],[6,[[8,\"SVG として記述されたコードは…\"]]],[8,[\"<svg width=\\\"120\\\" height=\\\"120\\\" viewBox=\\\"0 0 120 120\\\">\\n    <rect x=\\\"10\\\" y=\\\"10\\\" width=\\\"100\\\" height=\\\"100\\\" rx=\\\"15\\\" ry=\\\"15\\\" fill=\\\"red\\\" />\\n    <circle cx=\\\"50\\\" cy=\\\"50\\\" r=\\\"50\\\" fill=\\\"blue\\\" />\\n</svg>\\n\",[1,\"SVG\"]]],[6,[[8,\"ブラウザによって画像としてレンダリングされます。\"]]],[1,[0,\"svg\",[[\"width\",\"120\"],[\"viewbox\",\"0 0 120 120\"],[\"height\",\"120\"]],[[1,[0,\"rect\",[[\"y\",\"10\"],[\"x\",\"10\"],[\"width\",\"100\"],[\"ry\",\"15\"],[\"rx\",\"15\"],[\"height\",\"100\"],[\"fill\",\"red\"]],[]]],[1,[0,\"circle\",[[\"r\",\"50\"],[\"fill\",\"blue\"],[\"cy\",\"50\"],[\"cx\",\"50\"]],[]]]]]],[6,[[8,\"y 軸が下向きなので少しだけ違和感があるかもしれませんが、HTML の読み書きができれば SVG も問題なく扱えるはずです。\"]]],[5,[0],[[8,\"Elm で SVG を記述しよう\"]]],[6,[[8,\"同じことを Elm でもやってみましょう。\\nEllie に同じサンプルコードを用意しました。\"]]],[6,[[2,\"https://ellie-app.com/5x8N5hXk3RFa1\",[0],[[8,\"elm/svg sample | Ellie\"]]]]],[8,[\"import Svg exposing (Svg, svg, rect, circle)\\nimport Svg.Attributes exposing (width, height, viewBox, x, y, rx, ry, cx, cy, r, fill)\\n\\nmain : Svg msg\\nmain =\\n    svg\\n        [ width \\\"120\\\"\\n        , height \\\"120\\\"\\n        , viewBox \\\"0 0 120 120\\\"\\n        ]\\n        [ rect\\n                [ x \\\"10\\\"\\n                , y \\\"10\\\"\\n                , width \\\"100\\\"\\n                , height \\\"100\\\"\\n                , rx \\\"15\\\"\\n                , ry \\\"15\\\"\\n                , fill \\\"red\\\"\\n                ]\\n                []\\n        , circle\\n                [ cx \\\"50\\\"\\n                , cy \\\"50\\\"\\n                , r \\\"50\\\"\\n                , fill \\\"blue\\\"\\n                ]\\n                []\\n        ]\\n\",[1,\"Elm\"]]],[6,[[8,\"記法の都合でコードが縦長になりましたが、元の SVG と対応しているのがよく分かります。\\nもう少し丁寧に解説をしてみます。\"]]],[5,[1],[[8,\"モジュールのインポート\"]]],[8,[\"import Svg exposing (Svg, svg, rect, circle)\\nimport Svg.Attributes exposing (width, height, viewBox, x, y, rx, ry, cx, cy, r, fill)\\n\",[1,\"Elm\"]]],[6,[[8,\"コードの先頭で、2 つのモジュール Svg と Svg.Attributes をインポートしました。\\nこれらは Elm が公式に提供しているパッケージ elm/svg に含まれています。\"]]],[6,[[2,\"https://package.elm-lang.org/packages/elm/svg/latest/\",[0],[[8,\"svg 1.0.1 | Elm Packages\"]]]]],[6,[[8,\"この記事のサンプルコードは、リンク先のサンプルコードをより分かりやすくなるように書き直したものです。\"]]],[5,[1],[[8,\"main 関数の初期化\"]]],[6,[[8,\"Svg の関数は Html と同様に扱うことができます。\"]]],[8,[\"main : Svg msg\\nmain =\\n    svg\\n        [ width \\\"120\\\"\\n        , height \\\"120\\\"\\n        , viewBox \\\"0 0 120 120\\\"\\n        ]\\n        []\\n\",[1,\"Elm\"]]],[6,[[8,\"svg の第一引数には width, height, viewBox を指定しました。\"]]],[7,[[[[8,\"属性\"]],[0]],[[[8,\"説明\"]],[0]]],[[[[8,\"width\"]],[[8,\"画像の \\\"幅 (px)\\\"\"]]],[[[8,\"height\"]],[[8,\"画像の \\\"高さ (px)\\\"\"]]],[[[8,\"viewBox\"]],[[8,\"描画領域の \\\"x 座標 y 座標 幅 高さ\\\"\"]]]]],[6,[[8,\"viewBox は見慣れない属性かもしれません。\\nこの領域内に作成された図形が画面にレンダリングされます。\"]]],[6,[[8,\"慣れるまでは、サンプルのように \\\"0 0 (width に指定した値) (height に指定した値)\\\" という指定が無難でしょう。\\n必要に応じて SVG の仕様や解説記事を検索してください。\"]]],[6,[[2,\"https://triple-underscore.github.io/SVG11/struct.html#NewDocument\",[0],[[8,\"SVG 文書片を定義する： svg 要素 | 文書構造 – SVG 1.1 （第２版）\"]]]]],[5,[1],[[8,\"四角形（矩形）を描く：rect\"]]],[6,[[8,\"矩形は「くけい」と読みます。\\nこれを知っていると、次は「矩計（かなばかり）図」が読めなくなります。\"]]],[8,[\"rect\\n    [ x \\\"10\\\"\\n    , y \\\"10\\\"\\n    , width \\\"100\\\"\\n    , height \\\"100\\\"\\n    , rx \\\"15\\\"\\n    , ry \\\"15\\\"\\n    , fill \\\"red\\\"\\n    ]\\n    []\\n\",[1,\"Elm\"]]],[7,[[[[8,\"属性\"]],[0]],[[[8,\"説明\"]],[0]]],[[[[8,\"x\"]],[[8,\"\\\"x 座標 (px)\\\"\"]]],[[[8,\"y\"]],[[8,\"\\\"y 座標 (px)\\\"\"]]],[[[8,\"width\"]],[[8,\"\\\"幅 (px)\\\"\"]]],[[[8,\"height\"]],[[8,\"\\\"高さ (px)\\\"\"]]],[[[8,\"rx\"]],[[8,\"\\\"角丸の x 軸半径　(px)\\\"\"]]],[[[8,\"ry\"]],[[8,\"\\\"角丸の y 軸半径　(px)\\\"\"]]],[[[8,\"fill\"]],[[8,\"塗りつぶし色の指定（色）\"]]]]],[6,[[2,\"https://triple-underscore.github.io/SVG11/shapes.html#RectElement\",[0],[[8,\"rect 要素 | 基本図形 – SVG 1.1 （第２版）\"]]]]],[5,[1],[[8,\"円を描く：circle\"]]],[8,[\"circle\\n    [ cx \\\"50\\\"\\n    , cy \\\"50\\\"\\n    , r \\\"50\\\"\\n    , fill \\\"blue\\\"\\n    ]\\n    []\\n\",[1,\"Elm\"]]],[7,[[[[8,\"属性\"]],[0]],[[[8,\"説明\"]],[0]]],[[[[8,\"cx\"]],[[8,\"\\\"中心の x 座標 (px)\\\"\"]]],[[[8,\"cy\"]],[[8,\"\\\"中心の y 座標 (px)\\\"\"]]],[[[8,\"r\"]],[[8,\"\\\"円の半径　(px)\\\"\"]]],[[[8,\"fill\"]],[[8,\"塗りつぶし色の指定（色）\"]]]]],[6,[[8,\"楕円にしたいときは ellipse を使います。\"]]],[6,[[2,\"https://triple-underscore.github.io/SVG11/shapes.html#CircleElement\",[0],[[8,\"circle 要素 | 基本図形 – SVG 1.1 （第２版）\"]]]]],[5,[1],[[8,\"そのほかの図形\"]]],[6,[[8,\"パス・基本図形・テキストなどの要素と、様々なアトリビュートを組み合わせて、表現豊かな SVG を作成することができます。\"]]],[6,[[2,\"https://triple-underscore.github.io/SVG11/paths.html\",[0],[[8,\"パス – SVG 1.1 （第２版） | https://triple-underscore.github.io\"]]]]],[6,[[2,\"https://triple-underscore.github.io/SVG11/shapes.html\",[0],[[8,\"基本図形 – SVG 1.1 （第２版） | https://triple-underscore.github.io\"]]]]],[6,[[2,\"https://triple-underscore.github.io/SVG11/text.html\",[0],[[8,\"テキスト – SVG 1.1 （第２版） | https://triple-underscore.github.io\"]]]]],[5,[0],[[8,\"利用できる Elm のパッケージ\"]]],[6,[[8,\"Elm Packages で使えそうなパッケージを探してみましょう。\"]]],[6,[[2,\"https://package.elm-lang.org/\",[0],[[8,\"Elm Packages | https://package.elm-lang.org\"]]]]],[5,[1],[[8,\"SVG の基本となるパッケージ\"]]],[6,[[8,\"Elm では、SVG を扱うために 2 種類のパッケージが用意されています。\"]]],[7,[[[[8,\"パッケージ\"]],[0]],[[[8,\"説明\"]],[0]]],[[[[8,\"elm/svg\"]],[[8,\"Elm 公式の SVG パッケージ\"]]],[[[8,\"elm-community/typed-svg\"]],[[8,\"属性の型情報を付加したパッケージ\"]]]]],[6,[[8,\"どちらも SVG 用の基本的なモジュールを含み、互換性のあるパッケージです。\\n好みに応じて使い分けると良いでしょう。\\nデータの可視化など、より複雑な SVG を扱う際には elm-community/typed-svg の使用をお薦めします。\"]]],[5,[1],[[8,\"SVG の表現力を高めるパッケージ\"]]],[6,[[8,\"より複雑な SVG を作成するためのパッケージも用意されています。\\nデータの可視化（ビジュアライゼーション）や、ジェネラティブ・アートに挑戦してみるのも良いですね！\"]]],[7,[[[[8,\"パッケージ\"]],[0]],[[[8,\"説明\"]],[0]]],[[[[8,\"gampleman/elm-visualization\"]],[[8,\"D3.js に由来するデータ可視化用のライブラリ\"]]],[[[8,\"terezka/line-charts\"]],[[8,\"グラフ / チャート用のパッケージ\"]]],[[[8,\"gicentre/elm-vega\"]],[[8,\"Port を介して JavaScript の Vega を利用するためのパッケージ\"]]]]],[6,[[8,\"また、path を記述するためのパッケージは複数存在するようです。\"]]],[7,[[[[8,\"パッケージ\"]],[0]],[[[8,\"説明\"]],[0]]],[[[[8,\"Spaxe/svg-pathd\"]],[[8,\"d 属性を、M, L, Z などオリジナルの SVG と同様の記法で記述できる\"]]],[[[8,\"folkertdev/svg-path-lowlevel\"]],[[8,\"d 属性を、SVG の記法よりも読みやすく宣言的に記述できる\"]]],[[[8,\"folkertdev/one-true-path-experiment\"]],[[8,\"配列から path を生成するためのパッケージ\"]]]]],[5,[1],[[8,\"注意：廃止されたパッケージ\"]]],[6,[[8,\"以下のパッケージは elm/svg よりも前に使用されていたもので、現在は廃止されています。\\nブラウザの検索結果に出ることがあるので注意してください。\"]]],[7,[[[[8,\"パッケージ\"]],[0]],[[[8,\"説明\"]],[0]]],[[[[8,\"evancz/elm-svg\"]],[[8,\"廃止\"]]],[[[8,\"elm-lang/svg\"]],[[8,\"廃止\"]]]]],[5,[0],[[8,\"SVG は難しくない！\"]]],[6,[[8,\"でしょ？\"]]]]]","{\"method\":\"GET\",\"url\":\"file://content/posts/svg-with-elm.md\",\"headers\":[],\"body\":{\"type\":\"empty\"}}":"{\"parsedFrontmatter\":{\"title\":\"elm/svgを使ってみよう（SVGの基礎知識）\",\"description\":\"\",\"published\":\"2019-05-14\"}}"}}