{"is404":false,"staticData":{"markdown-blocks-content/posts/elm-starfighter.md":"[1,[[6,[[8,\"自作の Elm 開発用テンプレート「 \"],[2,\"https://github.com/y047aka/elm-starfighter\",[0],[[8,\"elm-starfighter\"]]],[8,\" 」が形になってきたので、その説明を書きます。\"]]],[5,[0],[[8,\"elm-starfighter とは？\"]]],[6,[[8,\"関数型言語 \"],[2,\"https://elm-lang.org\",[0],[[8,\"Elm\"]]],[8,\" を使った Web アプリケーション開発用のテンプレートです。webpack や Parcel といったモジュールバンドラーを使用せず、\"],[7,\"npm scripts\"],[8,\" で完結しています。Elm での開発に最低限必要なものをシンプルに使えるのが、elm-starfighter の特徴です。\"]]],[2,[[0,[0],[[2,\"https://github.com/y047aka/elm-starfighter\",[0],[[8,\"elm-starfighter\"]]]]]]],[5,[1],[[8,\"なぜ作ろうと思ったのか？\"]]],[6,[[8,\"JavaScript での開発と同様に、Elm においても webpack や Parcel を使った開発方法が普及しています。しかし、Elm はモジュールバンドラーを必要とはしていないかもしれません。それならばモジュールバンドラーに頼らない、よりシンプルな開発ができるのではないかと考えました。\"]]],[6,[[8,\"既に知られている \"],[2,\"https://github.com/halfzebra/create-elm-app\",[0],[[8,\"create-elm-app\"]]],[8,\" や \"],[2,\"https://github.com/elm-community/elm-webpack-starter\",[0],[[8,\"elm-webpack-starter\"]]],[8,\" に対して「毎回使うには大きすぎる」と感じたことも動機の 1 つです。Elm 入門者が簡単に使える開発ツールがあれば、Elm の持つ魅力をもっと引き出せるのではないかと思います。\"]]],[5,[1],[[8,\"開発の方針\"]]],[5,[2],[[8,\"Elm 入門者に優しく\"]]],[6,[[8,\"公式ガイドや『基礎からわかる Elm』を読んだあとで、すぐに使ってもらえるよう意識して作りました。使い方に迷うようなところがあれば改善していきたい。\"]]],[5,[2],[[8,\"Elm の持つ魅力を引き出す\"]]],[6,[[8,\"JavaScript と Elm では何が違うのかを意識しながら作りました。標準の \"],[7,\"elm make\"],[8,\" コマンドはデバッグ機能を使うことができますし、そこに開発用サーバー機能を付加した \"],[7,\"elm-live\"],[8,\" も非常に強力です。それらの良さを残しつつ、苦手な部分を補うようにしました。\"]]],[5,[2],[[8,\"モジュールバンドラーと戦わない\"]]],[6,[[8,\"適材適所を意識すること。例えば、Port を積極的に使うならモジュールバンドラーの方が有利のはず。\\n（私は Port をほとんど使わないので、推測で言っています）\"]]],[5,[1],[[8,\"謝辞\"]]],[6,[[8,\"@ababup1192 さんには、開発初期の段階で多くの相談に乗っていただきました。ありがとうございました。\"]]],[5,[0],[[8,\"簡単に使えるので書くことがない\"]]],[6,[[8,\"いちばん簡単な試し方は以下のコマンドを実行する方法です。\"]]],[8,[\"$ git clone https://github.com/y047aka/elm-starfighter.git\\n$ cd elm-startfighter\\n$ npm install\\n$ npm start\\n\",[0]]],[6,[[8,\"また、リポジトリのトップから緑色のボタン「Use this template」を選択すると、elm-starfighter を使った新しいリポジトリを作る事もできます。\\n\"],[3,\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/406109/3faa5b0f-8ff3-9280-fa09-6ba62e3495e8.png\",[0],[]]]],[5,[1],[[8,\"npm start\"]]],[6,[[7,\"npm start\"],[8,\" を実行すると、\"]]],[3,1,[[[7,\"docs\"],[8,\" にファイルが生成され\"]],[[8,\"開発用サーバーが起動し\"]],[[8,\"ブラウザに最初のページが表示されます\"]]]],[5,[1],[[8,\"npm run build\"]]],[6,[[8,\"もう 1 つのコマンドは \"],[7,\"npm run build\"],[8,\" で起動します。\"]]],[3,1,[[[7,\"public\"],[8,\" にファイルが生成されます\"]]]],[6,[[8,\"生成前のファイルはすべて \"],[7,\"src\"],[8,\" にあるので、いつも通りに開発を進められます。\"]]],[8,[\"src\\n - index.html\\n - main.js\\n - Main.elm\\n - style.sass または style.sass\\n - assets（画像など）\\n\",[0]]],[5,[1],[[8,\"ディレクトリ名について\"]]],[6,[[7,\"docs\"],[8,\" は Github Pages を、\"],[7,\"public\"],[8,\" は Netlify をすぐに使えるよう意図して設定しています。\"]]],[5,[0],[[8,\"おわり\"]]],[6,[[8,\"この記事の本編は、ここで終了です。\\nカスタマイズして使う場合には以下の付録を参考にしてください。\"]]],[5,[0],[[8,\"付録 1： package.json を読む\"]]],[6,[[8,\"ここに elm-starfighter のすべてがあります。webpack や Parcel の姿はなく、代わりに \"],[7,\"npm scripts\"],[8,\" が並んでいます。\"],[7,\"elm make\"],[8,\" コマンドや \"],[7,\"elm-live\"],[8,\" を使っていることが分かりますね。これから \"],[7,\"scripts\"],[8,\" を詳しく見ていきましょう。\"]]],[8,[\"{\\n  \\\"scripts\\\": {\\n    \\\"clean\\\": \\\"rimraf docs public\\\",\\n    \\\"watch:html\\\": \\\"cpx -w src/index.html docs\\\",\\n    \\\"watch:assets\\\": \\\"cpx -w \\\\\\\"src/assets/**/*\\\\\\\" docs/assets\\\",\\n    \\\"watch:js\\\": \\\"cpx -w src/main.js docs\\\",\\n    \\\"watch:elm\\\": \\\"elm-live src/Main.elm --open --start-page=index.html --dir=docs -- --output=docs/elm.js\\\",\\n    \\\"watch:sass\\\": \\\"sass --watch src:docs\\\",\\n    \\\"watch\\\": \\\"sass src:docs && npm-run-all -p watch:*\\\",\\n    \\\"compile:html\\\": \\\"cpx src/index.html public\\\",\\n    \\\"compile:assets\\\": \\\"cpx \\\\\\\"src/assets/**/*\\\\\\\" public/assets\\\",\\n    \\\"compile:js\\\": \\\"cpx src/main.js public\\\",\\n    \\\"compile:elm\\\": \\\"elm make src/Main.elm --optimize --output=public/elm.optimized.js\\\",\\n    \\\"compile:sass\\\": \\\"sass --style=compressed --no-source-map src:public\\\",\\n    \\\"compile\\\": \\\"npm-run-all -p compile:*\\\",\\n    \\\"minify:elm\\\": \\\"google-closure-compiler --js=public/elm.optimized.js --js_output_file=public/elm.js && rimraf public/elm.optimized.js\\\",\\n    \\\"build\\\": \\\"npm-run-all -s clean compile minify:elm\\\",\\n    \\\"start\\\": \\\"npm-run-all -s clean watch\\\",\\n    \\\"test\\\": \\\"elm-test\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"cpx\\\": \\\"^1.5.0\\\",\\n    \\\"elm\\\": \\\"0.19.0-bugfix6\\\",\\n    \\\"elm-live\\\": \\\"3.4.0\\\",\\n    \\\"elm-test\\\": \\\"^0.19.0-rev6\\\",\\n    \\\"google-closure-compiler\\\": \\\"^20190819.0.0\\\",\\n    \\\"npm-run-all\\\": \\\"^4.1.5\\\",\\n    \\\"rimraf\\\": \\\"^3.0.0\\\",\\n    \\\"sass\\\": \\\"^1.22.10\\\"\\n  }\\n}\\n\",[1,\"package.json\"]]],[5,[1],[[8,\"npm scripts\"]]],[6,[[8,\"以下の 4 種類のコマンドを \"],[7,\"start\"],[8,\" と \"],[7,\"build\"],[8,\" から実行しています。\"]]],[2,[[0,[0],[[8,\"clean\"]]],[0,[0],[[8,\"watch\"]]],[0,[0],[[8,\"compile\"]]],[0,[0],[[8,\"minify:elm\"]]]]],[5,[2],[[8,\"start\"]]],[6,[[7,\"clean\"],[8,\" と \"],[7,\"watch\"],[8,\" を順番に実行します。\"]]],[8,[\"\\\"start\\\": \\\"npm-run-all -s clean watch\\\"\\n\",[1,\"json\"]]],[6,[[8,\"生成したファイルは \"],[7,\"docs\"],[8,\" に出力されます。出力先のディレクトリ名を変更する場合は、以下のコマンド内の \"],[7,\"docs\"],[8,\" を新しい名前に書き直します。（実際には package.json をエディタで一括変換すれば問題ありません）\"]]],[5,[2],[[8,\"clean\"]]],[6,[[7,\"docs\"],[8,\" と \"],[7,\"public\"],[8,\" ディレクトリを 2 つとも削除します。このコマンドのみ、\"],[7,\"build\"],[8,\" と共有しています。\"]]],[8,[\"\\\"clean\\\": \\\"rimraf docs public\\\"\\n\",[1,\"json\"]]],[5,[2],[[8,\"watch\"]]],[6,[[8,\"「watch:」で始まるコマンドを、すべて同時に実行します。それぞれが \"],[7,\"src\"],[8,\" のファイルを監視し、変更があれば \"],[7,\"docs\"],[8,\" に出力します。\"]]],[8,[\"\\\"watch:html\\\": \\\"cpx -w src/index.html docs\\\",\\n\\\"watch:assets\\\": \\\"cpx -w \\\\\\\"src/assets/**/*\\\\\\\" docs/assets\\\",\\n\\\"watch:js\\\": \\\"cpx -w src/main.js docs\\\",\\n\\\"watch:elm\\\": \\\"elm-live src/Main.elm --open --start-page=index.html --dir=docs -- --output=docs/elm.js\\\",\\n\\\"watch:sass\\\": \\\"sass --watch src:docs\\\",\\n\\\"watch\\\": \\\"sass src:docs && npm-run-all -p watch:*\\\"\\n\",[1,\"json\"]]],[6,[[8,\"開発用のサーバーは \"],[7,\"watch:elm\"],[8,\" の elm-live が起動しています。\"]]],[5,[2],[[8,\"build\"]]],[6,[[7,\"clean\"],[8,\" \"],[7,\"compile\"],[8,\" \"],[7,\"minify:elm\"],[8,\" を順番に実行しています。\"]]],[8,[\"\\\"build\\\": \\\"npm-run-all -s clean compile minify:elm\\\",\\n\",[1,\"json\"]]],[6,[[8,\"生成したファイルは \"],[7,\"public\"],[8,\" に出力されます。出力先のディレクトリ名を変更する場合は、以下のコマンド内の \"],[7,\"public\"],[8,\" を新しい名前に書き直します。\"]]],[5,[2],[[8,\"compile\"]]],[6,[[8,\"「compile:」で始まるコマンドを、すべて同時に実行します。\"]]],[8,[\"\\\"compile:html\\\": \\\"cpx src/index.html public\\\",\\n\\\"compile:assets\\\": \\\"cpx \\\\\\\"src/assets/**/*\\\\\\\" public/assets\\\",\\n\\\"compile:js\\\": \\\"cpx src/main.js public\\\",\\n\\\"compile:elm\\\": \\\"elm make src/Main.elm --optimize --output=public/elm.optimized.js\\\",\\n\\\"compile:sass\\\": \\\"sass --style=compressed --no-source-map src:public\\\"\\n\\\"compile\\\": \\\"npm-run-all -p compile:*\\\"\\n\",[1,\"json\"]]],[6,[[5,[[8,\"注意：\"]]],[8,\" minify まで実行しないと elm.js を出力できない実装になっています。cpx でどうにかしたい。（2019 年 7 月 6 日）\"]]],[5,[2],[[8,\"minify:elm\"]]],[6,[[8,\"elm.optimized.js を圧縮し、elm.js として出力します。\"]]],[8,[\"\\\"minify:elm\\\": \\\"google-closure-compiler --js=public/elm.optimized.js --js_output_file=public/elm.js && rimraf public/elm.optimized.js\\\"\\n\",[1,\"json\"]]],[5,[0],[[8,\"付録 2： devDependencies\"]]],[6,[[8,\"使用した npm のパッケージについて簡単にコメントします。\"]]],[5,[2],[[8,\"cpx\"]]],[6,[[8,\"ファイル・フォルダのコピーを、Mac でも Windows でも出来るように。\\n\"],[7,\"--watch\"],[8,\" のオプションがあり、\"],[7,\"devDependencies\"],[8,\" の記述量を減らすことに繋がった。\\n（内部的には chokidar かな？）\\ncpx で上手くいかない場合は、ncp で妥協することになる。\"]]],[5,[2],[[8,\"elm\"]]],[6,[[8,\"Elm のコンパイラ。\"]]],[5,[2],[[8,\"elm-live\"]]],[6,[[8,\"browser-sync を試したものの、コンパイルエラーを無視してサーバーが起動してしまうため、 elm-live が最適という結論になった。\"]]],[5,[2],[[8,\"elm-test\"]]],[6,[[8,\"テスト（script 未実装）\"]]],[5,[2],[[8,\"google-closure-compiler\"]]],[6,[[8,\"Elm をコンパイルした後の js ファイルを圧縮する。\\nelm-minify が deprecated となり、こちらが推奨されていたので使用した。\"]]],[5,[2],[[1,[0,\"s\",[],[[6,[[8,\"node-sass\"]]]]]]]],[1,[0,\"s\",[],[[6,[[8,\"SASS を扱うために使用。いつか sass（Dart Sass）に変えるかもしれない。\"]]]]]],[6,[[8,\"sass（Dart Sass）に変更しました。（2019 年 7 月 9 日）\"]]],[5,[2],[[8,\"npm-run-all\"]]],[6,[[8,\"コマンドの直列実行と並列実行を読みやすく記述できる。\"]]],[5,[2],[[8,\"rimraf\"]]],[6,[[8,\"フォルダの削除を、Mac でも Windows でも出来るように。\"]]]]]","{\"method\":\"GET\",\"url\":\"file://content/posts/elm-starfighter.md\",\"headers\":[],\"body\":{\"type\":\"empty\"}}":"{\"parsedFrontmatter\":{\"title\":\"Elm での開発用テンプレート elm-starfighter を作った\",\"description\":\"\",\"published\":\"2019-07-06\"}}"}}